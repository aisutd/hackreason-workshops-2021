#include 'bec.lp'.

%Person details in the story captured using NER (named-entity-recognizer)
person(jan).
person(john).
person(mary).


%***Mary saw John in Holland Park***
%Semantic knowledge generated by VerbNet: Mary saw John in Holland park
discover(7.9, during(see_1),agent(mary),theme(john),source(unknown)).
occur(7.9, event(see_1), theme(john), location(holland_park)).

%extratction of semantic role information from the VerbNet knowledge: Discoverer is an agent
observer(E,X) :- discover(_, during(E),agent(X),_,_).

%Defining body of the BEC predicates 'happens' and 'initiates' using VerbNet Knowledge.
%Event E happens at time T in location Loc and theme Y
happens(E,T) :- occur(T, event(E), theme(Y), location(Loc)).


%Event E initiates the fluent in_london at time T, if an agent observes
%theme Y during the event that occurs in London and there are no exceptions
initiates(E, in_london, T) :-
        discover(T, during(E), agent(A), theme(Y), source(_)),
	occur(T,event(E), theme(Y), location(Loc)),
	is_in(Loc,london), not ab_initiates(E,in_london,T, A).

% Captures the exceptional scenario of 'intiates' for the fluent in_london: 
% if the observer has weak eye sight then person may not be in London
ab_initiates(E,in_london,T, A) :- person(A), observer(E,A), 
	                          not accurate(A,sense).
		
		
%***Holland Park is in London***
is_in(holland_park,london).
%GG: possible abducible

%***Jan met John in Amsterdam***
%Semantic knowledge from VerbNet
perceive(7.9, during(meet_1),experiencer(jan),stimulus(john)).
occur(7.9, event(meet_1), theme(john), location(amsterdam)).


%Definiting body of the BEC predicate 'terminate' using VerbNet Knowledge.
%It tells, event E terminates the fluent in_london at time T, if Y seen 
%by X in a place other than London (unless an abnormal condition applies such as Y is lying).
%Loc is in London and no evidence of any exceptional scenario.
terminates(E, in_london, T) :- 
	perceive(T, during(E),experiencer(X),stimulus(Y)),
	occur(T,event(E), theme(Y), location(Loc)),
	not is_in(Loc,london), 
	not ab_terminates(E,in_london,T).


%commonsense knowledge of who an observer is
observer(E,X) :- person(X), perceive(_, during(E),experiencer(X),_).

%commonsense knowledge of what a theme is
theme(E,X) :- person(X), perceive(_, during(E),_,stimulus(X)).


% Captures commonsense knowledge of exceptional scenario of 'terminates' 
% for the fluent: in_london. Terminate is inapplicable if the observer is lying.
ab_terminates(E,in_london,T) :- person(X), person(Y), observer(E,X), 
		theme(E,Y), not speaks(X, truth, Y).
								
								
%***since witnesses usually speak the truth.***
%commonsense knowledge about X speaks truth about Y with exceptions.
speaks(X,truth,Y) :- person(X), person(Y), observer(E,X), 
		theme(E,Y), not ab_speaks(X,truth,Y).  

%speaks(truth) is abnormal if X may_lie about Y is true.
ab_speaks(X,truth,Y) :- may_lie(X,Y).


%***our senses are usually accurate.***
%sense of X is accurate if there are no exceptional scenario
accurate(X,sense) :- person(X), not ab_accurate(X,sense).
					 
%accurate sense of X is abnormal if the X is old in age (assumption)
ab_accurate(X,sense) :- person(X), age(X,A), A = old.


%***Jan has a reason to lie. Jan and John are friends.***
% X may lie about Y, if we there are no evidence that -lie is true.
may_lie(X,Y) :- person(X), person(Y), not -lie(X,Y).


% -lie is true if X and Y does not have a conflict of interest				
-lie(X,Y) :- person(X), person(Y), not conflict_interest(X,Y).

% Commonsense knowledge: X has a conflict of interest with Y, 
% if X and Y are friends, Y is acrime suspect and there is no abnormal situation.
conflict_interest(X,Y) :- person(X), person(Y), friends(X,Y), 
			  crime_suspect(Y), not ab_conflict_interest(X).
						  
						  
% X is a crime suspect if X is a robbery suspect and there are no exceptional scenario.			  
crime_suspect(X) :- person(X), robbery_suspect(X), not ab_crime_suspect(X).
					
					
%***Jan and John are friends***
%friends(jan,john).			
#abducible friends(X,Y).
%GG: abducible

%***John is a suspect in a robbery in Holland Park that morning.***
%robbery_suspect(john).
#abducible robbery_suspect(X).
%GG: abducible

%Mary (the Observer) is old.
%age(mary,old).
#abducible age(X,Y).
%GG: abducible

%****where is john?****	
%ans is unknown: if we cant prove holds(in_london) and -holds(in_london). 
%This happens when both the following information are true:  age(mary,old) and robbery_suspect(john)
ans(unknown) :- not holds(in_london,8), not -holds(in_london,8).

%ans is not_in_london: if we can prove -holds(in_london). 
%This happens when robbery_suspect(john) is false (absent).
ans(not_in_london) :- -holds(in_london,8).

%ans is in_london: if we can prove holds(in_london). This happens 
%when age(mary,old) is false (absent).
ans(in_london) :- holds(in_london,8).

%Query
%?- ans(X).

%#show happens/2, holds/2.

